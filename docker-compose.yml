version: "3.8"

services:
  # db service removed as we are connecting to external Cloud SQL

  backend:
    build:
      context: ./interpreter-backend
      dockerfile: Dockerfile
    container_name: interpreter_backend
    # depends_on removed as db service is gone
    environment:
      # Use the Cloud SQL connection string
      DATABASE_URL: "postgresql://db_user:C8D7gsHJiv5LXBL35kHsrQ==@34.46.226.55:5432/interpreter_db?schema=public" # Provide via .env or secrets
      PORT: 8080 # Make sure this matches the EXPOSE in backend Dockerfile
      # Add any other necessary backend environment variables here
      # Load JWT_SECRET and OPENAI_API_KEY from .env or set them here directly
      # Example: Load from an env_file (ensure .env exists at runtime context)
      # env_file:
      #  - ./interpreter-backend/.env
      # Or set directly (less secure for secrets):
      JWT_SECRET: "k9+a+sPm9aw8BkdyMabTODJ3MVawLaIsvqQ98ZuSSZI=" # Provide via .env or secrets
      OPENAI_API_KEY: "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" # Provide via .env or secrets
    ports:
      - "8080:8080"
    volumes:
      # Mount code for development (optional, remove for production builds)
      - ./interpreter-backend:/app
      # Avoid mounting node_modules from host
      - /app/node_modules
      - /app/dist # Avoid mounting build output if already built in image
    networks:
      - interpreter_network
    # Generate client, push schema to DB, and then start the application
    command: sh -c "npx prisma generate && npx prisma db push --accept-data-loss && node dist/index.js"

  frontend:
    build:
      context: ./interpreter-frontend
      dockerfile: Dockerfile
      # Pass build args for frontend to know backend host
      args:
        # Use the host-accessible URL for build-time injection
        VITE_APP_BACKEND_URL: http://localhost:8080
    container_name: interpreter_frontend
    depends_on:
      - backend # Frontend still depends on backend
    ports:
      - "80:80" # Nginx default port
    volumes:
      # Mount code for development (optional, requires Nginx setup for hot-reloading or rebuilds)
      - ./interpreter-frontend:/app
      # Avoid mounting node_modules from host
      - /app/node_modules
      - /app/dist # Avoid mounting build output
    networks:
      - interpreter_network
    # Environment variables for runtime (if needed by entrypoint script, not build time)
    # environment:
    #   VITE_BACKEND_WS_HOST: ws://backend:8080

networks:
  interpreter_network:
    driver: bridge
# postgres_data volume removed as db service is gone
