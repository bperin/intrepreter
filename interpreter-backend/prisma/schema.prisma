// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  // Provider defaults to PostgreSQL for Cloud SQL deployment.
  // To use SQLite locally:
  // 1. Change provider below to "sqlite".
  // 2. Set DATABASE_URL in .env.local to "file:./prisma/dev.db".
  // 3. Run `npm run prisma:migrate`.
  // REMEMBER to change provider back to "postgresql" before building for production!
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  hashedPassword  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  conversations   Conversation[]
  refreshToken    String?  @unique // Made unique for potential revocation lookup
  refreshTokenExpiry DateTime? // Field for refresh token expiry
}

model Patient {
  id            String   @id @default(cuid())
  firstName     String
  lastName      String
  dateOfBirth   DateTime // Consider using DateTime or String based on needs
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  conversations Conversation[]
}

model Conversation {
  id             String   @id @default(cuid())
  userId         String
  patientId      String
  startTime      DateTime @default(now())
  endTime        DateTime? // Nullable for ongoing conversations
  status         String   // e.g., ACTIVE, SUMMARIZED, ENDED
  patientLanguage String   @default("en") // Default language if not detected/set
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient Patient @relation(fields: [patientId], references: [id], onDelete: Cascade)
  messages Message[] // Relation to messages
  notes          Note[]         // Relation to notes
  followUps      FollowUp[]     // Relation to follow-ups
  prescriptions  Prescription[] // Relation to prescriptions
  summary  Summary? // Relation to Summary (one-to-one)
  medicalHistory MedicalHistory? // Relation to MedicalHistory (one-to-one)

  @@index([userId])
  @@index([patientId])
}

// New Model for Medical History
model MedicalHistory {
  id             String   @id @default(cuid())
  content        String   @db.Text // Use Text type for potentially long content
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  conversationId String   @unique // Each conversation has one history
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model Summary {
  id             String   @id @default(cuid())
  content        String   @db.Text // Placeholder for summary content

  // --- Add relation back to Conversation --- 
  conversationId String   @unique // Each conversation has one summary
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  // ----------------------------------------

  createdAt      DateTime @default(now()) // Placeholder
  updatedAt      DateTime @updatedAt    // Placeholder
}

model Message {
  id                String       @id @default(cuid())
  conversationId    String
  conversation      Conversation @relation(fields: [conversationId], references: [id])
  timestamp         DateTime     @default(now())
  senderType        String       // 'clinician', 'patient', 'system', 'translation'
  originalText      String
  translatedText    String?      // Nullable if original is already in target language
  language          String       // Language code of originalText (e.g., 'en', 'es')
  isFinal           Boolean      @default(false) // Flag for intermediate vs final transcription/translation

  // --- Added for linking translations/derived messages ---
  originalMessageId String?      // Foreign key, optional
  originalMessage   Message?     @relation("OriginalDerivedMessages", fields: [originalMessageId], references: [id], onDelete: Cascade) // Optional relation to the original
  derivedMessages   Message[]    @relation("OriginalDerivedMessages") // List of messages derived from this one (e.g., translations)
  // -------------------------------------------------------

  @@index([originalMessageId]) // Index the foreign key
}


model Note {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  content        String       @db.Text
  status         String       @default("created") // e.g., created, reviewed
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
}

model FollowUp {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  duration       Int          // e.g., 1, 2
  unit           String       // e.g., "day", "week", "month"
  scheduledFor   DateTime?    // Calculated timestamp for the follow-up date/time
  details        String?      @db.Text // Optional field for extra context
  status         String       @default("scheduled") // e.g., scheduled, completed, cancelled
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
}

model Prescription {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  medicationName String
  dosage         String
  frequency      String
  details        String?      @db.Text // Optional field for extra instructions/quantity/refills
  status         String       @default("pending_review") // e.g., pending_review, sent, filled, cancelled
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([conversationId])
}
